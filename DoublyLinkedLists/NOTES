• In doubly linked lists, there is one pointer pointing to the next node and another pointer pointing at the previous node

• Although adding a pointer to the previous node is a small change to the code itself, it can make soemmethods easier.
    EXAMPLES
        1) The pop method: In a singly linked list there is only one way to pop off the last item on the list. We must start from the beginning, find the second to last item and then pop that item off. However, with a doubly linked list, we can work in reverse. We can look at the last item and then word backwards to find the second to last item. 
        2) Reversing a list: reversing a doubly linked list is much easier than reversing a singly linked list. For a singly linked list there is no easy way of reversing it, you make need to store the values in an array and then reverse it for instance. In a doubly linked list you can jusy look at the .prev values. 

• Doubly linked lists provide more flxibility but it takes up more memory because now we are storing a .next AND .prev 



METHODS:

1) PUSHING: adding a node to the end of a doubly linked list.
        Pseudocode: 
        • create a new node with the value passed to the function 
        • if the head property is null set the head andd tail to be the newly created node
        • if not, set the next property on the tail to be that node
        • set the previous property of the newly created node to be the tail 
        • set the tail to be the newly created node
        • increment the length 
        • return the doubly linked list
